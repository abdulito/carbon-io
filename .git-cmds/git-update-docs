#!/usr/bin/env python

from __future__ import (
    division,
    unicode_literals,
    print_function,
    absolute_import
)

import gitcmdutils.version_utils as version_utils
import gitcmdutils.semver as semver
import argparse
import logging
import json
import sys
import os

def main():
    parser = \
        argparse.ArgumentParser(description='update carbon-io docs submodules')
    
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='log debug output')
    parser.add_argument('-n', '--non-interactive', action='store_true',
                        help='pass this to skip prompting')

    opts = parser.parse_args(sys.argv[1:])

    logging.basicConfig(level=logging.DEBUG if opts.verbose else logging.WARN)

    submodules_to_commit = {}

    print("Update each of these out of date submodules...")
    for submodule in version_utils.get_out_of_date_submodules():
        print(submodule['path'])
        parent_path = submodule['parent_path']
        submodules_to_commit[parent_path] = parent_path.count('docs/packages')

    submodules_to_commit = sorted(submodules_to_commit, key=submodules_to_commit.get, reverse=True)

    print("\nBeginning commits...")
    for submodule in submodules_to_commit:
        new_tag = None
        print("\nUpdating: %s" % submodule)
        with open(submodule + 'package.json') as package:
            package_json = json.load(package)
            new_tag = semver.bump_patch(package_json['version'])
            print("\nOld package.json:\n%s" % json.dumps(package_json, indent=4))
            package_json['version'] = new_tag
            print("\nWriting to package.json:\n%s" % json.dumps(package_json, indent=4))

        git_commit_command = "git commit -am \"%s\"" % ("Bump version")
        git_tag_command = "git tag -a \"v%s\" -m \"v%s\"" % (new_tag, new_tag)
        git_push_command = "git push --tags origin master"

        cwd = os.getcwd()
        os.chdir(submodule)
        print("\ncd to %s" % submodule)

        print("Issuing git command: %s" % (git_commit_command))
        print("Issuing git command: %s" % (git_tag_command))
        print("Issuing git command: %s" % (git_push_command))

        os.chdir(cwd)
        print("cd to %s" % cwd)

    return 0

if __name__ == '__main__':
    sys.exit(main())

